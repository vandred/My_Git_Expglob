// Generated by CoffeeScript 1.11.1
(function() {
  window.Form = (function() {
    function Form(params) {
      this._Filters = {};
      this._Table = {};
      this._Service = params.service;
      this.jtable = params.jtable;
      this.$Table = $(params.table);
      this.$filterForm = $(params.filterForm);
      this.$Modal = $(params.modal);
      this._FormField = params.formField;
      this.sFormClean = params.formClean;
      this.$saveButton = $(params.saveButton);
    }

    Form.prototype.init = function(params) {
      this.$Table.jtable(this.jtable);
      return this.getList();
    };

    Form.prototype.getList = function() {
      return this.$Table.jtable('load', this._Filters);
    };

    Form.prototype.resetList = function() {
      return this.$Table.jtable('load', {});
    };

    Form.prototype.updateList = function() {
      return this.$Table.jtable('reload');
    };

    Form.prototype.getFilters = function() {
      var tempObj;
      tempObj = {
        OrganisationUnitId: $('#filterClinicianId').val() || void 0,
        filterName: $('#filterName').val() || void 0,
        filterSecurity: $('#filterSecurity').val() || void 0,
        filterGender: $('#filterGender').val() || void 0,
        filterLanguage: $('#filterLanguage').val() || void 0,
        filterPayor: $('#filterPayor').val() || void 0
      };
      return Object.assign(this._Filters, tempObj);
    };

    Form.prototype.fillForm = function(id) {
      var data, field, obj, ref, value;
      data = this._Table[id] || {};
      ref = this._FormField;
      for (field in ref) {
        obj = ref[field];
        value = data[field];
        if (typeof obj === 'string') {
          $(obj).val(value || '');
        }
        if (typeof obj === 'object') {
          if (obj.element) {
            $(obj.element).val(value || '');
          }
          if (obj.set) {
            obj.set(value, field, data);
          }
        }
      }
      return this.$saveButton.find(".btnText").text(app.localize('Save'));
    };

    Form.prototype.getForm = function(edit) {
      var data, field, obj, ref;
      data = {};
      ref = this._FormField;
      for (field in ref) {
        obj = ref[field];
        if (typeof obj === 'string') {
          data[field] = $(obj).val() || void 0;
        }
        if (typeof obj === 'object') {
          if (obj.element) {
            data[field] = $(obj.element).val() || void 0;
          }
          if (obj.get) {
            data[field] = obj.get();
          }
        }
      }
      return this.sendForm(data);
    };

    Form.prototype.sendForm = function(data) {
      this.$Modal.find('.result').addClass('hidden').end().find('.progress').removeClass('hidden');
      return this._Service.createOrUpdate(data).then((function(_this) {
        return function(data) {
          if (data.id) {
            _this.resetList();
            _this.clearFilters();
          } else {
            _this.updateList();
          }
          _this.$Modal.modal('hide');
          return swal(app.localize('Ok'), app.localize("Data saved!"), "success");
        };
      })(this)).fail((function(_this) {
        return function(data) {
          var e;
          try {
            return console.error('ERROR:', data);
          } catch (error) {
            e = error;
            return console.log('ERROR:', data);
          }
        };
      })(this)).always((function(_this) {
        return function() {
          return _this.$Modal.find('.progress').addClass('hidden').end().find('.result').removeClass('hidden');
        };
      })(this));
    };

    Form.prototype.deleteItem = function(id) {
      return this._Service["delete"]({
        id: id
      }).then((function(_this) {
        return function(data) {
          _this.updateList();
          return swal("Deleted!", "Your imaginary file has been deleted.", "success");
        };
      })(this)).fail((function(_this) {
        return function(data) {
          var e;
          try {
            return console.error('ERROR:', data);
          } catch (error) {
            e = error;
            return console.log('ERROR:', data);
          }
        };
      })(this));
    };

    Form.prototype.clearFilters = function() {
      return this.$filterForm.find(this.sFormClean).val('');
    };

    return Form;

  })();

}).call(this);

//# sourceMappingURL=Form.js.map
